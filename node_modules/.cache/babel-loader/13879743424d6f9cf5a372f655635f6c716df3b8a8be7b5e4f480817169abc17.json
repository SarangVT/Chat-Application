{"ast":null,"code":"var _jsxFileName = \"E:\\\\Chat-Application\\\\src\\\\components\\\\ChatWindow\\\\MessageInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport sendIcon from \"../../assets/images/sendIcon.png\";\nimport { useChats } from \"../context/ChatPreviewContext\";\nimport { Emoji } from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageInput = () => {\n  _s();\n  const {\n    addNewMessage,\n    curRecipient,\n    setCurTypingMsg,\n    curTypingMsg\n  } = useChats();\n  const handleInput = e => {\n    setCurTypingMsg(e.target.value, curRecipient);\n  };\n  useEffect(() => {\n    if (curRecipient) {\n      setCurTypingMsg(curTypingMsg[curRecipient], curRecipient);\n    }\n  }, [setCurTypingMsg, curRecipient, curTypingMsg]);\n  const onMsgSend = () => {\n    if (!curTypingMsg[curRecipient].trim() == \"\") {\n      addNewMessage(curTypingMsg[curRecipient], curRecipient);\n      setCurTypingMsg(\"\", curRecipient);\n    }\n  };\n  const handleEnterKey = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      onMsgSend();\n    }\n  };\n  const [showEmojiPicker, setShowEmojiPicker] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row w-[100%]\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"\",\n      onClick: () => setShowEmojiPicker(!showEmojiPicker),\n      children: \"Emoji\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Emoji, {\n        on: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type a message...\",\n      onChange: handleInput,\n      value: curTypingMsg[curRecipient],\n      onKeyDown: handleEnterKey,\n      className: \"flex-1 focus:outline-none bg-black placeholder-white text-white rounded-md h-[50px] mb-0 border-t-5 border-t-white pl-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"w-[55px] p-2 rounded-full border-2 border-black bg-[#578E7E] pr-2 ml-1\",\n      disabled: !curTypingMsg[curRecipient].trim() === \"\",\n      onClick: onMsgSend,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: sendIcon,\n        alt: \"Send\",\n        className: \"rounded-full h-[30px]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(MessageInput, \"fmHVY3Pp8ynUPbMt5i++7zoRXDk=\", false, function () {\n  return [useChats];\n});\n_c = MessageInput;\nexport default MessageInput;\nvar _c;\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"names":["React","useEffect","useState","sendIcon","useChats","Emoji","jsxDEV","_jsxDEV","MessageInput","_s","addNewMessage","curRecipient","setCurTypingMsg","curTypingMsg","handleInput","e","target","value","onMsgSend","trim","handleEnterKey","key","preventDefault","showEmojiPicker","setShowEmojiPicker","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","on","type","placeholder","onChange","onKeyDown","disabled","src","alt","_c","$RefreshReg$"],"sources":["E:/Chat-Application/src/components/ChatWindow/MessageInput.jsx"],"sourcesContent":["import React, { useEffect, useState} from \"react\";\r\nimport sendIcon from \"../../assets/images/sendIcon.png\"\r\nimport { useChats } from \"../context/ChatPreviewContext\";\r\nimport {Emoji} from 'emoji-picker-react';\r\n\r\n\r\nconst MessageInput = () => {\r\n    const {addNewMessage, curRecipient, setCurTypingMsg, curTypingMsg} = useChats();\r\n\r\n    const handleInput = (e)=>{\r\n        setCurTypingMsg(e.target.value, curRecipient);\r\n    }\r\n    useEffect(()=>{\r\n        if(curRecipient){\r\n            setCurTypingMsg(curTypingMsg[curRecipient], curRecipient);\r\n        }\r\n    },[setCurTypingMsg, curRecipient, curTypingMsg]);\r\n\r\n    const onMsgSend = ()=>{\r\n        if(!curTypingMsg[curRecipient].trim()==\"\"){\r\n        addNewMessage(curTypingMsg[curRecipient], curRecipient);\r\n        setCurTypingMsg(\"\", curRecipient);\r\n        }\r\n    }\r\n\r\n    const handleEnterKey = (e)=>{\r\n        if(e.key==='Enter'){\r\n            e.preventDefault();\r\n            onMsgSend();\r\n        }\r\n    }\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(0);\r\n    \r\n    return (\r\n        <div className={\"flex flex-row w-[100%]\"}>\r\n        <button className={\"\"} onClick={()=>setShowEmojiPicker(!showEmojiPicker)}>Emoji</button>\r\n        {showEmojiPicker && <div>\r\n            <Emoji on/>\r\n            </div>}\r\n        <input type=\"text\" placeholder=\"Type a message...\" onChange={handleInput} value={curTypingMsg[curRecipient]} onKeyDown={handleEnterKey}\r\n                className={\"flex-1 focus:outline-none bg-black placeholder-white text-white rounded-md h-[50px] mb-0 border-t-5 border-t-white pl-5\"}/>\r\n        <button className={\"w-[55px] p-2 rounded-full border-2 border-black bg-[#578E7E] pr-2 ml-1\"}\r\n        disabled = {!curTypingMsg[curRecipient].trim()===\"\"}\r\n        onClick={onMsgSend}\r\n        >\r\n            <img src={sendIcon}  alt=\"Send\" className={\"rounded-full h-[30px]\"}/></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}